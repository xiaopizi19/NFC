using App.Base;
using App.Game;
using System.Collections.Generic;
using UnityEngine;

namespace RedPoint
{
    public class RedPointConst
    {
        public const string main = "Main";
        public const string mail = "Main.Mail";
        public const string mailSystem = "Mail.Mail.System";

        public const string task = "Main.Task";
    }

    public class RedPointNode
    {
        public string nodeName;
        public int pointNum = 0;
        public RedPointNode parenNode = null;
        public RedPointSytem.OnPointNumChange numChangeFunc;

        public Dictionary<string, RedPointNode> dicChilds = new Dictionary<string, RedPointNode>();

        public void SetRedPointNum(int rpNum)
        {
            if (dicChilds.Count > 0)
            {
                Debug.LogError("Only Can Set Leaf Node");
                return;
            }
            pointNum = rpNum;
            NotifyPointNumChange();
            if(parenNode != null)
            {
                parenNode.ChangePredPointNum();
            }

        }
        public void ChangePredPointNum()
        {
            int num = 0;
            foreach(var node in dicChilds.Values)
            {
                num += node.pointNum;
            }
            if(num != pointNum)
            {
                pointNum = num;
                NotifyPointNumChange();
            }

        }
        public void NotifyPointNumChange()
        {
            numChangeFunc.Invoke(this);
        }

    }
    public class RedPointSytem : Singleton<UIManager>
    {
        public delegate void OnPointNumChange(RedPointNode node);
        RedPointNode mRootNode;

        static List<string> lstRedPointTreeList = new List<string>
        {
            RedPointConst.main,
            RedPointConst.mail,
            RedPointConst.mailSystem,

            RedPointConst.task,
        };

        public void InitRedPointTreeNode()
        {
            mRootNode = new RedPointNode();
            mRootNode.nodeName = RedPointConst.main;

            foreach(var s in lstRedPointTreeList)
            {
                var node = mRootNode;
                var treeNodeAy = s.Split('.');
                if(treeNodeAy[0] != mRootNode.nodeName)
                {
                    Debug.LogError("RedPointTree Root Node Error:" + treeNodeAy[0]);
                    continue;
                }
                if (treeNodeAy.Length > 0)
                {
                    for(int i= 1; i < treeNodeAy.Length; i++)
                    {
                        if (!node.dicChilds.ContainsKey(treeNodeAy[i]))
                        {
                            node.dicChilds.Add(treeNodeAy[i], new RedPointNode());
                        }
                        node.dicChilds[treeNodeAy[i]].nodeName = treeNodeAy[i];
                        node.dicChilds[treeNodeAy[i]].parenNode = node;

                        node = node.dicChilds[treeNodeAy[i]];
                    }
                }
            }
        }

        public void SetRedPointNodeCallBack(string strNode, RedPointSytem.OnPointNumChange callBack)
        {
            var nodeList = strNode.Split('.');
            if(nodeList.Length == 1)
            {
                if(nodeList[0] != RedPointConst.main)
                {
                    Debug.LogError("Get Wrong Root Node current is " + nodeList[0]);
                    return;
                }
            }

            var node = mRootNode;
            for(int i = 1; i < nodeList.Length; i++)
            {
                if (!node.dicChilds.ContainsKey(nodeList[i]))
                {
                    Debug.LogError("Does not Contains Child Node" + nodeList[i]);
                    return;
                }
                node = node.dicChilds[nodeList[i]];

                if(i == nodeList.Length - 1)
                {
                    node.numChangeFunc = callBack;
                    return;
                }
            }

        }

        public void SetInVoke(string strNode,int rPNum)
        {
            var nodeList = strNode.Split('.');
            if(nodeList.Length == 1)
            {
                if(nodeList[0]!= RedPointConst.main)
                {
                    Debug.LogError("Get Wrong Root Node current is " + nodeList[0]);
                    return;
                }
            }

            var node = mRootNode;
            for(int i = 1; i < nodeList.Length; i++)
            {
                if (!node.dicChilds.ContainsKey(nodeList[i]))
                {
                    Debug.LogError("Does not Contains Child Node" + nodeList[i]);
                    return;
                }
                node = node.dicChilds[nodeList[i]];

                if(i == nodeList.Length - 1)
                {
                    node.SetRedPointNum(rPNum);
                }
            }
        }
    }
}

